import jackdaw._JackdawAspects;

/**
 * Object which provides low-level join point-related methods.
 * @constructor
 */
function JoinPoints() {
}

/**
 * 
 * @return {$jp} the current root node of the AST
 */
JoinPoints.prototype.root = function() {
	var rootOutput = call GetRoot();
	return rootOutput.rootJp;
}

/**
 * 
 * @return {$jp[]} the children of the given node
 */
JoinPoints.prototype.children = function($jp,jpType) {
	var unfilteredJps = $jp.children;
	if(jpType == undefined){
		return unfilteredJps;
	}
	else{
		return this._filterNodes(unfilteredJps,jpType);
	}
}





/**
 * 
 * @return {$jp[]} the descendants of the given node
 */
JoinPoints.prototype.descendants = function($jp,jpType) {
	var unfilteredJps = $jp.descendants;
	if(jpType == undefined){
		return unfilteredJps;
	}
	else{
		return this._filterNodes(unfilteredJps,jpType);
	}
}

JoinPoints.prototype._filterNodes = function($jps, jpType) {

	var filteredJps = [];
	
	for(var $jp of $jps) {
	 	if($jp.type == jpType) {
          	filteredJps.push($jp);
        }
	}
	
	return filteredJps;

}