import lara.Strings;


var levels = [];
var breaks = [];
var continues = [];


function controlFlowFlattening($block){
	var result = "";
	result += outputDeclarations($block);
	result += flattenBlock($block);
	return result;

}


function flattenBlock($block){
	var result = "";
	var while_label = getUuid();
	var switch_variable = getUuid();
	var entry = "'" + getUuid() + "'";
	var exit = "'" + getUuid() + "'";

	result += "var " + switch_variable + " = " + entry + "\n";
	result += "while ( " + switch_variable + " != " + exit + "){\n";
	
	result += "\t" + "switch("+ switch_variable + "){\n";
	levels.push({variable: switch_variable,label:while_label});
	result += transformBlock($block,entry,exit);
	levels.pop();
	result+="\t}\n";
	result+="}";

	return result;
}

function transformBlock($block, entry, exit){
	var result = "";
	var blockParts = getBlockParts($block);
	
	var i = 0;
	var partExit;
	for(var part of blockParts){
		partExit = "'" + getUuid() + "'";
		if(i == blockParts.length - 1) {
			partExit = exit;
		}
		else partExit = "'" + getUuid() + "'";
		println("ENTRY - " + entry + " EX - " + partExit);
		switch(part.type) {
		  case "WhileStatement":
		    break;
	      case "Sequence":
	      	result += transformSequence(part,entry,partExit);
		    break;
		  default:
		    break;
		}
		
		i++;
		entry = partExit;
	}
	return result;
}

function transformSequence(sequence, entry, exit){
	var result = "";
	result += "case " + entry + ":\n";
	for(var stm of sequence.array){
		result += stm.code + "\n";
	}
	result += levels[levels.length - 1].variable + " = " + exit + "\n";
	result += "break;\n";
	
	return result;
}
function getUuid(){
	return  Strings.uuid();
}

function getBlockParts($block){
	var blockStatements = $block.field("body");

	var sequence = {type:"Sequence",array:[]};
	var blockParts = [];
	
	for(var stm of blockStatements){
		switch(stm.type) {
		  case "WhileStatement":
		    blockParts.push(sequence);
		    blockParts.push(stm);
		    sequence = {type:"Sequence",array:[]};
		    break;
		  case "VariableDeclaration":
		    break;
		  default:
		    sequence.array.push(stm);
		}
	}
	//If switch ends with non compounds left to add.
	if(sequence.array.length > 0) blockParts.push(sequence);
	return blockParts;
}

function outputDeclarations($block){
	var declarations = "";
	var blockChildren = $block.field("body");
	for(var child of blockChildren){
		if(child.type == "VariableDeclaration"){
			for(var a of child.children){
				if(a.type == "VariableDeclarator"){
					a.refactor(getUuid());
				}
			}
			declarations = declarations + child.code+"\n";
		}
	}
	return declarations;
}
