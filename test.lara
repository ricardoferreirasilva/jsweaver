import weaver.WeaverJps;
import jackdaw.Jackdaw;
import obfuscation.Flatted;
import obfuscation.OpaquePredicates;
import obfuscation.Obfuscator;

import lara.util.ProcessExecutor;
import lara.Io;



// Iteratively obfuscates the functions in a file.
aspectdef getObfuscableFunctions

	select file end
	
	var outputFolder = Jackdaw.getData().getOutputFolder();
	var configuration = {predicates:{min:3,max:6},functions:[{name:"", algorithms:["opaque","flat"]}]};
	var excludedFunctions = ["sc_number2jsstring","sc_list","sc_dualAppend"];
	
	apply
		var configFunctions = [];
		var functions = WeaverJps.searchFrom($file, 'functionDeclaration').get();
		for(var i=0;i<functions.length;i++){
			var $f = functions[i];
			println($f.code);
			$f.insert("replace","var ahah=1");
			println($f.code);
		}
		 	
	end
end
function excludedFunction($f,excludedFunctions){
	for(var functionName of excludedFunctions){
		if(functionName == $f.name) return true;
	}
	return false;
}
